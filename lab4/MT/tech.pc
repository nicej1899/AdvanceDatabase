/*
*       Author:         Paul Girard Ph.D., UQAC
*       Date:           May 2019
*       Objective:      Program using Pro*C/C++ and gcc to show how to use 
*                       different type of PL/SQL blocks & SQL in a C PGM
*
*       Step 1: Precompilation with Pro*C/C++
* proc INAME=lab4base.pc CODE=ANSI_C SQLCHECK=semantics MODE=oracle USERID=user/password CHAR_MAP=charz
*
*       Step 2: Compilation with gcc    
* gcc lab4base.c -o lab4base -include /$ORACLE_HOME/precomp/public/sqlca.h -lclntsh -B$ORACLE_HOME/lib/ -B$ORACLE_HOME/lib
*/

#include <stdio.h>
#include <stdlib.h>
 
void sql_error();
void do_connect();
void lispart();
void explosion();
int print_menu();

int main()
{ 
        EXEC SQL WHENEVER SQLERROR do sql_error("Error at connect"); 
        
        do_connect();           /* connection to Oracle instance */

/*      Display the program menu
*       and execution of the transaction 
*/
        
        while (1)       /* infinite loop */
        {
         switch (print_menu())
         {
          case 1: lispart();
                  break;
          case 2: explosion();
                  break;
          case 3: print_menu();
                  break;
                 case 4: puts("\nAu revoir Sayonara Bye bye, Ni Hao"); 
                exit(0);
          default: puts("\n =====> Enter a digit from the menu please ?");
                   break;
         }
        }
        
        EXEC SQL COMMIT WORK RELEASE;           /* lib�re les verroux et d�connecte */
                                        
        exit(0); 
}                       /* end of main() program */

/* ******************************************************************************************
*       Function to display the original error Oracle message 
*  ******************************************************************************************
*/

void sql_error(char *msg)
{
        char ora_msg[512];                      /* buffer for Oracle error message */
        int buf_len, msg_len;
        
        EXEC SQL WHENEVER SQLERROR continue;    /* Prevent an infinite loop */
        
        printf("\n%s\n",msg);                   /* print the local program message */
        buf_len=sizeof(ora_msg);
        
        sqlglm(ora_msg,&buf_len, &msg_len);     /* read the Oracle error message */
        printf("\n%.*s\n",msg_len, ora_msg);    /* print this message */
        
        EXEC SQL ROLLBACK RELEASE;              /* free locks */
        exit(1);
}               /*      fin de sql_error */

/* ******************************************************************************************
*       Function to do a connection to an Oracle user schema
*  ******************************************************************************************
*/

void do_connect()
{
   char *uid="ora00069/VbMyxJ";

        EXEC SQL CONNECT :uid; 
        printf("Connected to Oracle schema\n");
}

/* ******************************************************************************************
*       Function to display the contents of a given part
*  ******************************************************************************************
*/

void lispart()
{
char    description[16];     /* C needs 1 more octet than Oracle for binary 0 
                                at the end of a C character type */
int     my_partid, none=1;
        for (;;)                /* infinite loop until user enter a 0 */
        {
                printf("Number of the part (0 to quit )? ");
                scanf("%d",&my_partid);         

                printf("Part Number : %d\n",my_partid);
                if (my_partid == 0) 
                { 
                        EXEC SQL COMMIT; 
                        printf("End of this transaction\n"); 
                        break; 
                } 

/*-------------- Beginning the PL/SQL block -----------------*/ 

        EXEC SQL EXECUTE
        BEGIN 
                SELECT part_name INTO :description      /* note: description needs 1 octet more */
                FROM ora00097.part WHERE part_id = :my_partid;
                EXCEPTION
                        WHEN NO_DATA_FOUND THEN 
                        :none:=0;
        END;
        END-EXEC;

/*-------------- end of PL/SQL block -----------------*/ 

        if (none==0)  
           {
                printf("Record not found \n");
                none=1;
           }
        else
            {
                printf("Name of the part\n"); 
                printf("---------------\n"); 
                printf("%s\n",description); 
            }
        EXEC SQL COMMIT;
        }                               /* end of infinite loop */
        return; 
}

void explosion()
{
    int part_id;
    int expolsion_id;
    int none;

    for(;;)
    {
        printf("Enter a part id:");
        scanf("%d",&part_id);
        if(part_id == 0)
        {
            printf("End of this transaction\n"); 
            EXEC SQL COMMIT; 
            return; 
        }
        none = 1;
        
        EXEC SQL declare c1 cursor for
            select component_id from ora00097.component
            where part_id = :part_id;
        EXEC SQL open c1;
        EXEC SQL WHENEVER NOT FOUND do break;

        printf("id\n");
        printf("---------------\n"); 
        for(;;)
        {
            EXEC SQL fetch c1 into :expolsion_id;
            printf("%d\n", expolsion_id);
            none = 0;
        }
        if(none)
        {
            printf("\n");
        }
        printf("End of this transaction\n"); 
        EXEC SQL close c1;
        EXEC SQL COMMIT;
    }
}

/* ************************************************************
*       Function print the menu and choose the transaction
*  ************************************************************
*/

int print_menu()
{
   int choice;                          /* id of menu */
        printf("\n\t Choose a transaction by entering a number \n");
        printf("\t *****************************************\n");
        printf("\t (1) LISPART\n");
        printf("\t (2) EXPLOSION\n");
        printf("\t (3) DISPLAY MENU\n");
        printf("\t (4) QUIT\n");
        printf("Enter your choice ? "); 
        scanf("%d",&choice);            /* read the choice */
        return choice;
}
